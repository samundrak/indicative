// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";

  /**
   * @author Harminder Virk
   * @since v0.6
   * @description Container of different rules , each returns a promise
   */

  /**
   * @requires IS,LODASH,BLUEBIRD,EXTENDED RULES
   */
  var EXTENDED_RULES, IS, PROMISE, Rules, _,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  IS = require('is_js');

  _ = require('lodash');

  PROMISE = require('bluebird');

  EXTENDED_RULES = require('./extendedRules');


  /**
    * @class Rules
    * @extends {Class} EXTENDED_RULES
   */

  Rules = (function(superClass) {
    extend(Rules, superClass);


    /**
     * @constructor Registers series of dynamic methods based of their nature
     * @uses        IS.js
     */

    function Rules() {

      /**
       * @var {Object} Access to this
       */
      var arthmetic, dates, methods, regex, self, strings, types;
      self = this;

      /**
       * Family of regex rules
       * @type {Array}
       */
      regex = ['url', 'email', 'creditCard', 'alphaNumeric', 'socialSecurityNumber', 'hexadecimal', 'hexColor', 'ip', 'ipv4', 'ipv6'];

      /**
       * Family of dates rules
       * @type {Array}
       */
      dates = ['today', 'yesterday', 'tomorrow', 'past', 'future', 'weekday', 'weekend'];

      /**
       * Family of types rules
       * @type {Array}
       */
      types = ['array', 'boolean', 'null', 'number', 'object', 'json', 'string'];

      /**
       * Family of strings rules
       * @type {Array}
       */
      strings = ['upperCase', 'lowerCase', 'capitalized', 'palindrome'];

      /**
       * Family of arthmetic rules
       * @type {Array}
       */
      arthmetic = ['even', 'odd', 'positive', 'negative', 'decimal', 'integer', 'finite', 'infinite'];

      /**
       * @var {Array} Concating above families to single array
       */
      methods = Array.prototype.concat(dates, regex, types, strings, arthmetic);
      _.map(methods, function(method) {
        return self.validations[method] = function(data, field, message) {
          if ((_.includes(dates, method)) && (_.has(data, field)) && new Date(data[field] !== 'Invalid Date')) {
            data[field] = new Date(data[field]);
          }
          return new PROMISE(function(resolve, reject) {
            if ((!data[field]) || IS[method](data[field])) {
              return resolve("is " + method);
            } else {
              return reject(message);
            }
          });
        };
      });
    }

    return Rules;

  })(EXTENDED_RULES);

  module.exports = Rules;

}).call(this);

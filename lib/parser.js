// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";

  /**
   * @author Harminder Virk
   * @since v1.0.5
   * @description Parser to parse rules and convert into consumable objects
   * @singleton
   */
  var MESSAGES, Parser, _;

  _ = require('lodash');

  MESSAGES = new (require('./messages'));

  Parser = (function() {
    var instance;

    instance = null;

    function Parser() {
      if (!instance) {
        instance = this;
      }
      return instance;
    }


    /**
     * Parse entry level rules into nested object
     * @param  {[string]} rules - Object to rule string
     */

    Parser.prototype.parseRules = function(rules, return_data, toKey) {
      var self;
      self = this;
      return _.transform(rules, function(result, rule, key) {
        if (!return_data) {
          return_data = result;
        }
        if (toKey) {
          key = toKey + "." + key;
        }
        if (_.isObject(rule) && !_.isArray(rule)) {
          return self.parseRules(rule, return_data, key);
        } else {
          return return_data[key] = _.isArray(rule) ? rule : _.compact(rule.split("|"));
        }
      });
    };


    /**
      * method to parse a single rule and return
      * rule applied, arguments and error message to display
      * @param {String} rule Rule to parse against a field
      * @param {String} key field name
     */

    Parser.prototype.parseRule = function(rule, key, value) {
      var args, defination, extracter, matchedRule, message;
      matchedRule = /(\w+):/.exec(rule);
      defination = rule;
      args = void 0;
      if (matchedRule) {
        extracter = matchedRule[0], defination = matchedRule[1];
        args = rule.replace(extracter, '');
      }
      message = MESSAGES.buildMessage(defination, key, args, value);
      rule = defination.replace(/_([a-z])/g, function(g) {
        return g[1].toUpperCase();
      });
      return {
        rule: rule,
        args: args,
        message: message
      };
    };

    return Parser;

  })();

  module.exports = Parser;

}).call(this);

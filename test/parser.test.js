// Generated by CoffeeScript 1.10.0
(function() {
  var Messages, Parser, chai, expect, should;

  chai = require('chai');

  should = chai.should();

  expect = chai.expect;

  Parser = new (require('../lib/parser'));

  Messages = new (require('../lib/messages'));

  describe("parseRules", function() {
    beforeEach(function(done) {
      Messages.destructor();
      return done();
    });
    it("should parse pipe seperated rules to hash object", function(done) {
      var expected, hash, rules;
      rules = {
        name: 'required|min:4'
      };
      expected = {
        name: ['required', 'min:4']
      };
      hash = Parser.parseRules(rules);
      expect(hash).to.deep.equal(expected);
      return done();
    });
    it("should parse pipe seperated rules to hash object when there are leading pipes with no value", function(done) {
      var expected, hash, rules;
      rules = {
        name: 'required|min:4|'
      };
      expected = {
        name: ['required', 'min:4']
      };
      hash = Parser.parseRules(rules);
      expect(hash).to.deep.equal(expected);
      return done();
    });
    return it("should parse pipe seperated rules to hash object when there are multiple pipes inside single rule", function(done) {
      var expected, hash, rules;
      rules = {
        name: 'required||min:4'
      };
      expected = {
        name: ['required', 'min:4']
      };
      hash = Parser.parseRules(rules);
      expect(hash).to.deep.equal(expected);
      return done();
    });
  });

  describe("parseRule", function() {
    beforeEach(function(done) {
      Messages.destructor();
      return done();
    });
    it("should parse a single rule", function(done) {
      var expected, field, hash, rule;
      rule = 'required';
      field = 'name';
      expected = {
        rule: 'required',
        args: void 0,
        message: 'required validation failed on name'
      };
      hash = Parser.parseRule(rule, field);
      expect(hash).to.deep.equal(expected);
      return done();
    });
    it("should parse a single rule with arguments", function(done) {
      var expected, field, hash, rule;
      rule = 'min:4';
      field = 'name';
      expected = {
        rule: 'min',
        args: "4",
        message: 'min validation failed on name'
      };
      hash = Parser.parseRule(rule, field);
      expect(hash).to.deep.equal(expected);
      return done();
    });
    it("should parse a single rule with multiple arguments", function(done) {
      var expected, field, hash, rule;
      rule = 'range:4,10';
      field = 'age';
      expected = {
        rule: 'range',
        args: "4,10",
        message: 'range validation failed on age'
      };
      hash = Parser.parseRule(rule, field);
      expect(hash).to.deep.equal(expected);
      return done();
    });
    it("should parse rule and show custom message", function(done) {
      var expected, field, hash, rangeMessage, rule;
      rangeMessage = 'Your age must be between 4 to 10 years';
      Messages.setMessage('range', rangeMessage);
      rule = 'range:4,10';
      field = 'age';
      expected = {
        rule: 'range',
        args: "4,10",
        message: rangeMessage
      };
      hash = Parser.parseRule(rule, field);
      expect(hash).to.deep.equal(expected);
      return done();
    });
    it("should not parse values defined next to rules", function() {
      var expected, field, hash, rule;
      rule = 'date_format:HH:mm';
      field = 'time';
      expected = {
        rule: 'date_format',
        args: "HH:mm"
      };
      hash = Parser.parseRule(rule, field);
      return expect(hash.args).to.equal(expected.args);
    });
    return it("should not split an array of rules", function() {
      var return_data, rules;
      rules = {
        dob: 'date_format:HH:mm|required'
      };
      rules = {
        dob: ['date_format:HH:mm', 'required']
      };
      return_data = {};
      Parser.parseRules(rules, return_data);
      return expect(return_data).deep.equal(rules);
    });
  });

}).call(this);

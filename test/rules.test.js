// Generated by CoffeeScript 1.10.0
(function() {
  var Rules, chai, expect, moment, rules, should;

  chai = require('chai');

  moment = require('moment');

  should = chai.should();

  expect = chai.expect;

  Rules = require('../lib/rules');

  rules = new Rules;

  describe("#Rules", function() {
    describe("arthimetic rules", function() {
      context("above", function() {
        var field, message, ruleDefination;
        field = 'age';
        message = 'Age must be above 30 years';
        ruleDefination = '30';
        it("should return error when value passed is not above the defined value", function() {
          var data;
          data = {
            age: 23
          };
          return rules.validations.above(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should return resolved promise when value passed is more than defined value", function() {
          var data;
          data = {
            age: 31
          };
          return rules.validations.above(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("decimal", function() {
        var field, message;
        field = 'test-speed';
        message = 'test speed should be in decimal numbers';
        it("should return error when value passed is not a decimal number", function() {
          var data;
          data = {
            'test-speed': 10
          };
          return rules.validations.decimal(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should return work fine when a valid decimal value has been passed", function() {
          var data;
          data = {
            'test-speed': 10.5
          };
          return rules.validations.decimal(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("equals", function() {
        var field, message, ruleDefination;
        field = 'promo_code';
        message = 'invalid promo code';
        ruleDefination = 'SUNDAY30';
        it("should return error when value passed does not equals defined value", function() {
          var data;
          data = {
            promo_code: 'SUNDAY10'
          };
          return rules.validations.equals(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when value passed is equal to the defined value", function() {
          var data;
          data = {
            promo_code: 'SUNDAY30'
          };
          return rules.validations.equals(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("even", function() {
        var field, message;
        field = 'car_doors';
        message = 'car doors cannot be even in number';
        it("should return error when value passed is not an even number", function() {
          var data;
          data = {
            car_doors: 3
          };
          return rules.validations.even(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when value passed is a valid even number", function() {
          var data;
          data = {
            car_doors: 4
          };
          return rules.validations.even(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("finite", function() {
        var field, message;
        field = 'employees';
        message = 'number of employees should be finite';
        it("should return error when value passed is not finite", function() {
          var data;
          data = {
            employees: 42 / 0
          };
          return rules.validations.finite(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when value passed is a valid finite number", function() {
          var data;
          data = {
            employees: 42
          };
          return rules.validations.finite(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("infinite", function() {
        var field, message;
        field = 'stars';
        message = 'number of employees should be infinite';
        it("should return error when value passed is not infinite", function() {
          var data;
          data = {
            stars: 42
          };
          return rules.validations.infinite(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when value passed is a valid infinite number", function() {
          var data;
          data = {
            stars: Infinity
          };
          return rules.validations.infinite(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("integer ", function() {
        var field, message;
        field = 'age';
        message = 'age is not valid';
        it("should return error when value passed is not an integer", function() {
          var data;
          data = {
            age: '42'
          };
          return rules.validations.integer(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when value passed is a valid integer", function() {
          var data;
          data = {
            age: 28
          };
          return rules.validations.integer(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("max", function() {
        var field, message, ruleDefination;
        field = 'password';
        message = 'password cannot be greater than 6 digits';
        ruleDefination = 6;
        it("should return error when length of value is more than defined length", function() {
          var data;
          data = {
            password: 'hello@1210219'
          };
          return rules.validations.max(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should work fine when length of value is below than defined length", function() {
          var data;
          data = {
            password: 'r@1Y!'
          };
          return rules.validations.max(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should work fine when length of value is equal to the defined length", function() {
          var data;
          data = {
            password: 'tr@1Y!'
          };
          return rules.validations.max(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        return it("should work fine when value contains integers only", function() {
          var data;
          data = {
            password: 123456
          };
          return rules.validations.max(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("min", function() {
        var field, message, ruleDefination;
        field = 'password';
        message = 'password should be greater than 6 digits';
        ruleDefination = 6;
        it("should return error when length of value is less than defined length", function() {
          var data;
          data = {
            password: 'hello'
          };
          return rules.validations.min(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should work fine when length of value is greater than defined length", function() {
          var data;
          data = {
            password: 'brr@1Y!'
          };
          return rules.validations.min(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should work fine when length of value is equal to the defined length", function() {
          var data;
          data = {
            password: 'tr@1Y!'
          };
          return rules.validations.min(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        return it("should work fine when value contains integers only", function() {
          var data;
          data = {
            password: 123456
          };
          return rules.validations.min(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("negative", function() {
        var field, message;
        field = 'tempature';
        message = 'tempature should be below 0 degrees';
        it("should return error when value passed is not negative", function() {
          var data;
          data = {
            tempature: 10
          };
          return rules.validations.negative(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should return error when value passed is not a valid number", function() {
          var data;
          data = {
            tempature: '-2'
          };
          return rules.validations.negative(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when value passed is a valid negative number", function() {
          var data;
          data = {
            tempature: -2
          };
          return rules.validations.negative(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("notEquals", function() {
        var field, message, ruleDefination;
        field = 'username';
        message = 'username john has already been taken';
        ruleDefination = 'john';
        it("should return an error when value passed is equal to the defined value", function() {
          var data;
          data = {
            username: 'john'
          };
          return rules.validations.notEquals(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when value passed does not equal defined value", function() {
          var data;
          data = {
            username: 'johny'
          };
          return rules.validations.notEquals(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("odd", function() {
        var field, message;
        field = 'station';
        message = 'station channel frequency should be an odd value';
        it("should return error when value passed is not an odd number", function() {
          var data;
          data = {
            station: 104
          };
          return rules.validations.odd(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when value passed is a valid odd number", function() {
          var data;
          data = {
            station: 93.5
          };
          return rules.validations.odd(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("positive", function() {
        var field, message;
        field = 'age';
        message = 'age cannot be negative';
        it("should return error when value passed is not positive", function() {
          var data;
          data = {
            age: -1
          };
          return rules.validations.positive(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when value passed is a valid positive number", function() {
          var data;
          data = {
            age: 10
          };
          return rules.validations.positive(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("range", function() {
        var field, message, ruleDefination;
        field = 'age';
        message = 'age should be between 18 to 40 years';
        ruleDefination = '18,40';
        it("should return error when value passed is under defined range", function() {
          var data;
          data = {
            age: 16
          };
          return rules.validations.range(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should return error when value passed is over defined range", function() {
          var data;
          data = {
            age: 42
          };
          return rules.validations.range(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should work fine when value passed is between defined range", function() {
          var data;
          data = {
            age: 22
          };
          return rules.validations.range(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should work fine when value passed is between defined range and is a decimal number", function() {
          var data;
          data = {
            age: 22.2
          };
          return rules.validations.range(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should work fine when value passed is between defined range and is a rounded decimal number", function() {
          var data;
          data = {
            age: 22.0
          };
          return rules.validations.range(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        return it("should work fine when value passed is between defined range and range is in negative", function() {
          var data;
          data = {
            longitude: 89.1
          };
          ruleDefination = '-180.0,180.0';
          field = 'longitude';
          return rules.validations.range(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      return context("under", function() {
        var field, message, ruleDefination;
        field = 'age';
        message = 'Age must be under 50 years';
        ruleDefination = 50;
        it("should return error when value passed is not under defined value", function() {
          var data;
          data = {
            age: 52
          };
          return rules.validations.under(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should return resolved promise when value passed is under defined value", function() {
          var data;
          data = {
            age: 31
          };
          return rules.validations.under(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
    });
    describe("datetime rules", function() {
      context("after", function() {
        var field, message, ruleDefination;
        field = 'expiry_date';
        message = 'Expiry date cannot be past';
        ruleDefination = moment().format("YYYY-MM-DD");
        it("should return error when value passed is not after defined date", function() {
          var data;
          data = {
            expiry_date: moment().subtract(1, 'day').format("YYYY-MM-DD")
          };
          return rules.validations.after(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should return error when value passed is same as defined date", function() {
          var data;
          data = {
            expiry_date: moment().format("YYYY-MM-DD")
          };
          return rules.validations.after(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when date passed is after defined date", function() {
          var data;
          data = {
            expiry_date: moment().add(1, 'day').format("YYYY-MM-DD")
          };
          return rules.validations.after(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("afterOffsetOf", function() {
        var field, message, ruleDefination;
        field = 'expiry_date';
        message = 'Expiry date cannot be past';
        ruleDefination = '1,days';
        it("should return error when value passed is not after defined offset", function() {
          var data;
          data = {
            expiry_date: moment().format("YYYY-MM-DD")
          };
          return rules.validations.afterOffsetOf(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should return error when value passed is same as defined offset", function() {
          var data;
          data = {
            expiry_date: moment().add(1, 'days').toISOString()
          };
          return rules.validations.afterOffsetOf(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should work fine when date passed is after the defined offset", function() {
          var data;
          data = {
            expiry_date: moment().add(1, 'days').add(1, 'seconds').toISOString()
          };
          return rules.validations.afterOffsetOf(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should validate against now with no args as offset", function() {
          var data;
          data = {
            expiry_date: moment().toISOString()
          };
          return rules.validations.afterOffsetOf(data, field, message, '').then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when date passed is after now with no args as offset", function() {
          var data;
          data = {
            expiry_date: moment().add(1, 'seconds').toISOString()
          };
          return rules.validations.afterOffsetOf(data, field, message, '').then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("before", function() {
        var field, message, ruleDefination;
        field = 'dob';
        message = 'Your dob cannot be after today';
        ruleDefination = moment().format("YYYY-MM-DD");
        it("should return error when value passed is not before defined date", function() {
          var data;
          data = {
            dob: moment().add(1, 'day').format("YYYY-MM-DD")
          };
          return rules.validations.before(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should return error when value passed is same as defined date", function() {
          var data;
          data = {
            dob: moment().format("YYYY-MM-DD")
          };
          return rules.validations.before(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when date passed is before defined date", function() {
          var data;
          data = {
            dob: moment().subtract(1, 'day').format("YYYY-MM-DD")
          };
          return rules.validations.before(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("beforeOffsetOf", function() {
        var field, message, ruleDefination;
        field = 'dob';
        message = 'Your dob cannot be after today';
        ruleDefination = '1,days';
        it("should return error when value passed is after defined offset", function() {
          var data;
          data = {
            dob: moment().add(1, 'day').add(1, 'seconds').toISOString()
          };
          return rules.validations.beforeOffsetOf(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should return error when value passed is same as defined offset", function() {
          var data;
          data = {
            dob: moment().add(1, 's').toISOString()
          };
          return rules.validations.beforeOffsetOf(data, field, message, '0').then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should work fine when date passed is before defined offset", function() {
          var data;
          data = {
            dob: moment().toISOString()
          };
          return rules.validations.beforeOffsetOf(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should validate against now with no args as offset", function() {
          var data;
          data = {
            dob: moment().add(1, 's').toISOString()
          };
          return rules.validations.beforeOffsetOf(data, field, message, '').then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when date passed is before now with no args as offset", function() {
          var data;
          data = {
            dob: moment().subtract(1, 's').toISOString()
          };
          return rules.validations.beforeOffsetOf(data, field, message, '').then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("date", function() {
        var field, message;
        field = 'dob';
        message = 'dob should be a valid date';
        it("should return error when value passed is not a valid date", function() {
          var data;
          data = {
            dob: "20140428"
          };
          return rules.validations.date(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should work fine when date passed is a valid date", function() {
          var data;
          data = {
            dob: "2014-04-28"
          };
          return rules.validations.date(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should work fine when date passed is a valid date and has MM/DD/YYYY format", function() {
          var data;
          data = {
            dob: "04/28/2015"
          };
          return rules.validations.date(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should work fine when date passed is a valid date and has MM‐DD‐YYYY format", function() {
          var data;
          data = {
            dob: "04-28-2015"
          };
          return rules.validations.date(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should work fine when date passed is a valid date and has YYYY/MM/DD format", function() {
          var data;
          data = {
            dob: "2015/04/28"
          };
          return rules.validations.date(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        return it("should return error when value passed is not in predefined date formats", function() {
          var data;
          data = {
            dob: "2014.04.28"
          };
          return rules.validations.date(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
      });
      context("dateFormat", function() {
        var field, message, ruleDefination;
        field = 'dob';
        message = 'dob should be a valid date as YYYY-MM-DD';
        ruleDefination = "YYYY-MM-DD";
        it("should return error when value passed is not a valid date", function() {
          var data;
          data = {
            dob: "20140428"
          };
          return rules.validations.dateFormat(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should return error when value passed is a valid date but not in defined format", function() {
          var data;
          data = {
            dob: "2015/04/28"
          };
          return rules.validations.dateFormat(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when date passed is a valid date with valid defined format", function() {
          var data;
          data = {
            dob: "2014-04-28"
          };
          return rules.validations.dateFormat(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("day", function() {
        var field, message, ruleDefination;
        field = 'party_night';
        message = 'Party nights should be saturday\'s only';
        ruleDefination = "saturday";
        it("should return error when day of date passed is not equal to defined day", function() {
          var data;
          data = {
            party_night: "2015-04-28"
          };
          return rules.validations.day(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should not work when value passed is not a valid date object or neither can be converted to date object", function() {
          var data;
          data = {
            party_night: "25th april 2015"
          };
          return rules.validations.day(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when day of date passed is equal to defined day", function() {
          var data;
          data = {
            party_night: "2015-04-25"
          };
          return rules.validations.day(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("future", function() {
        var field, message;
        field = 'next_release';
        message = 'Release can be done in future only';
        it("should return error when value passed is not a future date", function() {
          var data;
          data = {
            next_release: moment().format()
          };
          return rules.validations.future(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should return error when value passed is today but with smaller time", function() {
          var data;
          data = {
            next_release: moment().subtract(3, 'hours').format()
          };
          return rules.validations.future(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should work fine when value passed is today but with greater time", function() {
          var data;
          data = {
            next_release: moment().add(3, 'hours').format()
          };
          return rules.validations.future(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        return it("should work fine when value passed is a valid future date", function() {
          var data;
          data = {
            next_release: moment().add(1, 'day').format()
          };
          return rules.validations.future(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("month", function() {
        var field, message, ruleDefination;
        field = 'closing_date';
        message = 'Closing months can be march only';
        ruleDefination = "march";
        it("should return error when month of date passed is not equal to defined month", function() {
          var data;
          data = {
            closing_date: "2015-04-28"
          };
          return rules.validations.month(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when month of date passed is equal to defined month", function() {
          var data;
          data = {
            closing_date: "2015-03-31"
          };
          return rules.validations.month(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("future", function() {
        var field, message;
        field = 'dob';
        message = 'Dob should be in past';
        it("should return error when value passed is not a past date", function() {
          var data;
          data = {
            dob: moment().add(3, 'days').format()
          };
          return rules.validations.past(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should return error when value passed is today but with greater time", function() {
          var data;
          data = {
            dob: moment().add(3, 'hours').format()
          };
          return rules.validations.past(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should work fine when value passed is today but with smaller time", function() {
          var data;
          data = {
            dob: moment().subtract(3, 'hours').format()
          };
          return rules.validations.past(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        return it("should work fine when value passed is a valid date in past", function() {
          var data;
          data = {
            dob: moment().subtract(3, 'days').format()
          };
          return rules.validations.past(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("today", function() {
        var field, message;
        field = 'somefield';
        message = 'date should be today only';
        it("should return error when date passed is not today", function() {
          var data;
          data = {
            somefield: moment().add(1, 'day').format()
          };
          return rules.validations.today(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when value date passed is today", function() {
          var data;
          data = {
            somefield: moment().format()
          };
          return rules.validations.today(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("tomorrow", function() {
        var field, message;
        field = 'somefield';
        message = 'date should be tomorrow only';
        it("should return error when date passed is not tomorrow", function() {
          var data;
          data = {
            somefield: moment().format()
          };
          return rules.validations.tomorrow(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when value date passed is tomorrow", function() {
          var data;
          data = {
            somefield: moment().add(1, 'day').format()
          };
          return rules.validations.tomorrow(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("weekday", function() {
        var field, message;
        field = 'working_hours';
        message = 'working hours should be on weekdays only';
        it("should return error when day of date passed is not a weekday", function() {
          var data;
          data = {
            working_hours: moment().day('sunday').format()
          };
          return rules.validations.weekday(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when day of date passed is a valid weekday", function() {
          var data;
          data = {
            working_hours: moment().day('monday').format()
          };
          return rules.validations.weekday(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("weekend", function() {
        var field, message;
        field = 'adoniscon';
        message = 'adoniscon should be on weekends only';
        it("should return error when day of date passed is not weekend", function() {
          var data;
          data = {
            adoniscon: moment().day('monday').format()
          };
          return rules.validations.weekend(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when day of date passed is a valid weekend", function() {
          var data;
          data = {
            adoniscon: moment().day('saturday').format()
          };
          return rules.validations.weekend(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("weekend", function() {
        var field, message;
        field = 'adoniscon';
        message = 'adoniscon should be on weekends only';
        it("should return error when day of date passed is not weekend", function() {
          var data;
          data = {
            adoniscon: moment().day('monday').format()
          };
          return rules.validations.weekend(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when day of date passed is a valid weekend", function() {
          var data;
          data = {
            adoniscon: moment().day('saturday').format()
          };
          return rules.validations.weekend(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("year", function() {
        var field, message, ruleDefination;
        field = 'world_cup';
        message = 'cricket world cup dates should be in 2015 only';
        ruleDefination = 2015;
        it("should return error when year of date passed is not equal to defined year", function() {
          var data;
          data = {
            world_cup: "2014-10-20"
          };
          return rules.validations.year(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when year of date passed is equal to defined year", function() {
          var data;
          data = {
            world_cup: "2015-10-20"
          };
          return rules.validations.year(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      return context("yesterday", function() {
        var field, message;
        field = 'somefield';
        message = 'date should be yesterday only';
        it("should return error when date passed is not yesterday", function() {
          var data;
          data = {
            somefield: moment().add(1, 'day').format()
          };
          return rules.validations.yesterday(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when value date passed is yesterday", function() {
          var data;
          data = {
            somefield: moment().subtract(1, 'day').format()
          };
          return rules.validations.yesterday(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
    });
    describe("regular expression rules", function() {
      context("alpha", function() {
        var field, message;
        field = 'name';
        message = 'name should only contain letters';
        it("should return error when value passed is not alpha", function() {
          var data;
          data = {
            name: 'doe123'
          };
          return rules.validations.alpha(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when value passed is an alpha value", function() {
          var data;
          data = {
            name: 'doe'
          };
          return rules.validations.alpha(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("alphaNumeric", function() {
        var field, message;
        field = 'username';
        message = 'username should be combination of numbers and letters';
        it("should return error when value passed is not alphaNumeric", function() {
          var data;
          data = {
            username: 'doe@123'
          };
          return rules.validations.alphaNumeric(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when value passed is an alphaNumeric value", function() {
          var data;
          data = {
            username: 'd0e1j'
          };
          return rules.validations.alphaNumeric(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("creditCard", function() {
        var field, message;
        field = 'card_number';
        message = 'card number is not valid';
        it("should return error when value passed is not a valid credit card number format", function() {
          var data;
          data = {
            card_number: '878282246310005'
          };
          return rules.validations.creditCard(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should work fine when value passed is a valid credit card number format", function() {
          var data;
          data = {
            card_number: '378282246310005'
          };
          return rules.validations.creditCard(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should work fine with american express credit card format", function() {
          var data;
          data = {
            card_number: '371449635398431'
          };
          return rules.validations.creditCard(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should work fine with american express corporate credit card format", function() {
          var data;
          data = {
            card_number: '378734493671000'
          };
          return rules.validations.creditCard(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should work fine with discover credit card format", function() {
          var data;
          data = {
            card_number: '6011111111111117'
          };
          return rules.validations.creditCard(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should work fine with diners club credit card format", function() {
          var data;
          data = {
            card_number: '30569309025904'
          };
          return rules.validations.creditCard(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should work fine with JCB club credit card format", function() {
          var data;
          data = {
            card_number: '3530111333300000'
          };
          return rules.validations.creditCard(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should work fine with MasterCard credit card format", function() {
          var data;
          data = {
            card_number: '5555555555554444'
          };
          return rules.validations.creditCard(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should work fine with Visa credit card format", function() {
          var data;
          data = {
            card_number: '4111111111111111'
          };
          return rules.validations.creditCard(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        return it("should work fine with Visa credit card with less character format", function() {
          var data;
          data = {
            card_number: '4222222222222'
          };
          return rules.validations.creditCard(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("email", function() {
        var field, message;
        field = 'email';
        message = 'email is not valid';
        it("should return error when value passed is not valid email address", function() {
          var data;
          data = {
            email: 'some-string'
          };
          return rules.validations.email(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when value passed is valid email address", function() {
          var data;
          data = {
            username: 'myemail@test.com'
          };
          return rules.validations.email(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("email", function() {
        var field, message;
        field = 'email';
        message = 'email is not valid';
        it("should return error when value passed is not valid email address", function() {
          var data;
          data = {
            email: 'some-string'
          };
          return rules.validations.email(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when value passed is valid email address", function() {
          var data;
          data = {
            username: 'myemail@test.com'
          };
          return rules.validations.email(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("hexadecimal", function() {
        var field, message;
        field = 'color';
        message = 'color should hex decimal only';
        it("should return error when value passed is not a valid hexadecimal", function() {
          var data;
          data = {
            color: 'string'
          };
          return rules.validations.hexadecimal(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when value passed is valid hexadecimal", function() {
          var data;
          data = {
            color: 'ff0000'
          };
          return rules.validations.hexadecimal(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("hexColor", function() {
        var field, message;
        field = 'color';
        message = 'color should be a valid hex color code';
        it("should return error when value passed is not a valid hex color code", function() {
          var data;
          data = {
            color: '#eeee'
          };
          return rules.validations.hexColor(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when value passed is valid hex color code", function() {
          var data;
          data = {
            color: '#ff0000'
          };
          return rules.validations.hexColor(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("ip", function() {
        var field, message;
        field = 'ip_address';
        message = 'ip address is not valid';
        it("should return error when value passed is not a valid ip address", function() {
          var data;
          data = {
            ip_address: '1209000192'
          };
          return rules.validations.ip(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should work fine with ipv4 address", function() {
          var data;
          data = {
            ip_address: '10.0.0.68'
          };
          return rules.validations.ip(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should work fine with ipv6 address", function() {
          var data;
          data = {
            ip_address: '3ffe:1900:4545:3:200:f8ff:fe21:67cf'
          };
          return rules.validations.ip(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        return it("should work fine when value passed is a valid ip address", function() {
          var data;
          data = {
            ip_address: '127.0.0.1'
          };
          return rules.validations.ip(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("ipv4", function() {
        var field, message;
        field = 'ip_address';
        message = 'ip address should be valid ipv4 address';
        it("should return error when value passed is not a valid ip address", function() {
          var data;
          data = {
            ip_address: '1209000192'
          };
          return rules.validations.ipv4(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should work fine with ipv4 address", function() {
          var data;
          data = {
            ip_address: '10.0.0.68'
          };
          return rules.validations.ipv4(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        return it("should return error when value passed is not a valid ipv4 address", function() {
          var data;
          data = {
            ip_address: '3ffe:1900:4545:3:200:f8ff:fe21:67cf'
          };
          return rules.validations.ipv4(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
      });
      context("ipv6", function() {
        var field, message;
        field = 'ip_address';
        message = 'ip address should be valid ipv6 address';
        it("should return error when value passed is not a valid ip address", function() {
          var data;
          data = {
            ip_address: '1209000192'
          };
          return rules.validations.ipv6(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should work fine with ipv6 address", function() {
          var data;
          data = {
            ip_address: '3ffe:1900:4545:3:200:f8ff:fe21:67cf'
          };
          return rules.validations.ipv6(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        return it("should return error when value passed is not a valid ipv6 address", function() {
          var data;
          data = {
            ip_address: '10.0.0.68'
          };
          return rules.validations.ipv6(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
      });
      context("socialSecurityNumber", function() {
        var field, message;
        field = 'ssn';
        message = 'ssn is not valid';
        it("should return error when value passed is not a valid ssn", function() {
          var data;
          data = {
            ssn: '121000999'
          };
          return rules.validations.socialSecurityNumber(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine with valid ssn", function() {
          var data;
          data = {
            ssn: '362-90-0999'
          };
          return rules.validations.socialSecurityNumber(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      return context("url", function() {
        var field, message;
        field = 'blog_address';
        message = 'blog address should be a valid url';
        it("should return error when value passed is not a valid url", function() {
          var data;
          data = {
            blog_address: 'examplecom'
          };
          return rules.validations.url(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should work fine with valid url", function() {
          var data;
          data = {
            blog_address: 'http://url.com'
          };
          return rules.validations.url(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should work fine without http protocol", function() {
          var data;
          data = {
            blog_address: 'url.com'
          };
          return rules.validations.url(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should work fine without https protocol", function() {
          var data;
          data = {
            blog_address: 'https://url.com'
          };
          return rules.validations.url(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should work fine without www", function() {
          var data;
          data = {
            blog_address: 'www.url.com'
          };
          return rules.validations.url(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        return it("should work fine without www", function() {
          var data;
          data = {
            blog_address: 'www.url.com'
          };
          return rules.validations.url(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
    });
    describe("strings", function() {
      context("capitalized", function() {
        var field, message;
        field = 'full_name';
        message = 'your name should start with a capital letter';
        it("should return error when value passed is not capitalized", function() {
          var data;
          data = {
            full_name: 'j doe'
          };
          return rules.validations.capitalized(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work find when value passed is capitalized", function() {
          var data;
          data = {
            full_name: 'J Doe'
          };
          return rules.validations.capitalized(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("endsWith", function() {
        var field, message, ruleDefination;
        field = 'email_address';
        message = 'your email address should ends with @company.com';
        ruleDefination = '@company.com';
        it("should return error when value passed does not ends with defined value", function() {
          var data;
          data = {
            email_address: 'some.email@example.com'
          };
          return rules.validations.endsWith(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work find when value passed ends with defined value", function() {
          var data;
          data = {
            email_address: 'some.email@company.com'
          };
          return rules.validations.endsWith(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("includes", function() {
        var field, message, ruleDefination;
        field = 'flight_make';
        message = 'flight make should be boeing';
        ruleDefination = 'boeing';
        it("should return error when value passed does not include defined value", function() {
          var data;
          data = {
            flight_make: 'airbus a380'
          };
          return rules.validations.includes(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work find when value passed contains defined value", function() {
          var data;
          data = {
            flight_make: 'boeing 787'
          };
          return rules.validations.includes(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("lowerCase", function() {
        var field, message;
        field = 'username';
        message = 'username should be all lower case';
        it("should return error when value passed is not all lower case", function() {
          var data;
          data = {
            username: 'Bingo!'
          };
          return rules.validations.lowerCase(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work find when value passed is all lower case", function() {
          var data;
          data = {
            username: 'bingo!'
          };
          return rules.validations.lowerCase(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("startsWith", function() {
        var field, message, ruleDefination;
        field = 'username';
        message = 'username should prefix with company name';
        ruleDefination = 'COM';
        it("should return error when value passed does not starts with defined value", function() {
          var data;
          data = {
            username: 'CO-bingo'
          };
          return rules.validations.startsWith(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work find when value starts with defined value", function() {
          var data;
          data = {
            username: 'COM-bingo'
          };
          return rules.validations.startsWith(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      return context("upperCase", function() {
        var field, message;
        field = 'gender';
        message = 'gender should be all lower case';
        it("should return error when value passed is not all upper case", function() {
          var data;
          data = {
            gender: 'Male'
          };
          return rules.validations.upperCase(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work find when value passed is all upper case", function() {
          var data;
          data = {
            username: 'MALE'
          };
          return rules.validations.upperCase(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
    });
    describe("types", function() {
      context("array", function() {
        var field, message;
        field = 'cars';
        message = 'cars should be an array';
        it("should return error when value passed is not an array", function() {
          var data;
          data = {
            cars: 'beamer'
          };
          return rules.validations.array(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work find when value passed is an array", function() {
          var data;
          data = {
            cars: ['beamer']
          };
          return rules.validations.array(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("boolean", function() {
        var field, message;
        field = 'is_active';
        message = 'active state should be a boolean';
        it("should return error when value passed is not a boolean value", function() {
          var data;
          data = {
            is_active: 'yes'
          };
          return rules.validations.boolean(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work find when value passed is a boolean value", function() {
          var data;
          data = {
            is_active: true
          };
          return rules.validations.boolean(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      return context("json", function() {
        var field, message;
        field = 'songs_list';
        message = 'songs should be sent over in JSON format';
        it("should return error when value passed is not a valid JSON", function() {
          var data;
          data = {
            songs_list: 'songname:somename'
          };
          return rules.validations.json(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work find when value passed is valid JSON", function() {
          var data;
          data = {
            songs_list: {
              song_name: 'somename'
            }
          };
          return rules.validations.json(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
    });
    return describe("presence", function() {
      context("accepted", function() {
        var field, message;
        field = 'terms';
        message = 'terms should be accepted';
        it("should return an error when field under validation has not been accepted", function() {
          var data;
          data = {
            terms: false
          };
          return rules.validations.accepted(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when field under validation is accepted , means is not false or null or blank", function() {
          var data;
          data = {
            terms: 'Yes'
          };
          return rules.validations.accepted(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("different", function() {
        var field, message, ruleDefination;
        field = 'alternate_email';
        message = 'alternate email should be different from email address';
        ruleDefination = 'email';
        it("should return an error when field under validation is not different from defined field", function() {
          var data;
          data = {
            email: 'original@example.com',
            alternate_email: 'original@example.com'
          };
          return rules.validations.different(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should work fine when defined field does not exists in data object", function() {
          var data;
          data = {
            alternate_email: 'original@example.com'
          };
          return rules.validations.different(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        return it("should work fine when value is different from the defined field", function() {
          var data;
          data = {
            email: 'original@example.com',
            alternate_email: 'alternate@example.com'
          };
          return rules.validations.different(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("in", function() {
        var field, message, ruleDefination;
        field = 'user_type';
        message = 'user type should be one of the defined types';
        ruleDefination = 'Admin,Moderator,User';
        it("should return an error when field under value is not one of the defined value", function() {
          var data;
          data = {
            user_type: 'Staff'
          };
          return rules.validations["in"](data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when value of defined field is in one of the defined values", function() {
          var data;
          data = {
            user_type: 'Admin'
          };
          return rules.validations["in"](data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("notIn", function() {
        var field, message, ruleDefination;
        field = 'username';
        message = 'user name has been taken';
        ruleDefination = 'admin,root,superuser';
        it("should return an error when field under value is in one of the defined value", function() {
          var data;
          data = {
            username: 'admin'
          };
          return rules.validations.notIn(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when value of defined field is not in one of the defined values", function() {
          var data;
          data = {
            user_type: 'behlo'
          };
          return rules.validations.notIn(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("required", function() {
        var field, message;
        field = 'username';
        message = 'username is required';
        it("should return an error when field under validation is not present", function() {
          var data;
          data = {};
          return rules.validations.required(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should work when data passed is not a string and is required", function() {
          var data;
          data = {
            username: [0, 1]
          };
          return rules.validations.required(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should return an error when field under validation is null", function() {
          var data;
          data = {
            username: null
          };
          return rules.validations.required(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should return an error when field under validation is undefined", function() {
          var data;
          data = {
            username: void 0
          };
          return rules.validations.required(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should not return an error when field under validation is false", function() {
          var data;
          data = {
            username: false
          };
          return rules.validations.required(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should work fine when value is present", function() {
          var data;
          data = {
            username: 'joe'
          };
          return rules.validations.required(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("work fine when value passed is a numeric negative boolean", function() {
          var data;
          data = {
            username: 0
          };
          return rules.validations.required(data, field, message).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        return it("throw error when field under validation is empty", function() {
          var data;
          data = {
            username: ""
          };
          return rules.validations.required(data, field, message).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
      });
      context("required_if", function() {
        var field, message, ruleDefination;
        field = 'mustache';
        message = 'required when user is gender is male';
        ruleDefination = 'gender,male';
        it("should work fine when field if field is not present", function() {
          var data;
          data = {};
          return rules.validations.requiredIf(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should return an error when field if field is present and field under validation is not present", function() {
          var data;
          data = {
            gender: 'male'
          };
          return rules.validations.requiredIf(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should return an error when field if field is present and field under validation is null", function() {
          var data;
          data = {
            gender: 'male',
            mustache: null
          };
          return rules.validations.requiredIf(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should return an error when field if field is present and field under validation is undefined", function() {
          var data;
          data = {
            gender: 'male',
            mustache: void 0
          };
          return rules.validations.requiredIf(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should return an error when field if field is present and field under validation is set to false", function() {
          var data;
          data = {
            gender: 'male',
            mustache: false
          };
          return rules.validations.requiredIf(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should work fine when field under validation is present and value of field under if is also same", function() {
          var data;
          data = {
            gender: 'male',
            mustache: true
          };
          return rules.validations.requiredIf(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        return it("should work fine when field under validation is present and value of field under if value is not equal to defined value", function() {
          var data;
          data = {
            gender: 'female',
            mustache: false
          };
          return rules.validations.requiredIf(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("required_with_all", function() {
        var field, message, ruleDefination;
        field = 'apple_freak';
        message = 'apple freak should be true when user owns all apple devices';
        ruleDefination = 'iphone,mac,imac,ipod,ipad';
        it("should work fine when `with fields` are not present and field under validation is also not present", function() {
          var data;
          data = {};
          return rules.validations.requiredWithAll(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should work fine when some of the `with fields` are present and field under validation is not present", function() {
          var data;
          data = {
            imac: true,
            ipod: true
          };
          return rules.validations.requiredWithAll(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should return error when all of the `with fields` are present and field under validation is not present", function() {
          var data;
          data = {
            imac: true,
            ipod: true,
            ipad: true,
            mac: true,
            iphone: true
          };
          return rules.validations.requiredWithAll(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should return error when all of the `with fields` are present and field under validation is null", function() {
          var data;
          data = {
            imac: true,
            ipod: true,
            ipad: true,
            mac: true,
            iphone: true,
            apple_freak: null
          };
          return rules.validations.requiredWithAll(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should return error when all of the `with fields` are present and field under validation is undefined", function() {
          var data;
          data = {
            imac: true,
            ipod: true,
            ipad: true,
            mac: true,
            iphone: true,
            apple_freak: void 0
          };
          return rules.validations.requiredWithAll(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should work fine when all of the `with fields` are present and field under validation is false", function() {
          var data;
          data = {
            imac: true,
            ipod: true,
            ipad: true,
            mac: true,
            iphone: true,
            apple_freak: false
          };
          return rules.validations.requiredWithAll(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        return it("should work fine when all of the `with fields` are present and field under validation is true or present", function() {
          var data;
          data = {
            imac: true,
            ipod: true,
            ipad: true,
            mac: true,
            iphone: true,
            apple_freak: true
          };
          return rules.validations.requiredWithAll(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("required_with_any", function() {
        var field, message, ruleDefination;
        field = 'social_login';
        message = 'social login should be set true when user is logged in using social channels';
        ruleDefination = 'twitter,facebook,gplus';
        it("should work fine when `with any fields` are not present and field under validation is also not present", function() {
          var data;
          data = {};
          return rules.validations.requiredWithAny(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should return error when field under validation is not present and any one with any fields are present", function() {
          var data;
          data = {
            twitter: true
          };
          return rules.validations.requiredWithAny(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should return error when field under validation is null and any one with any fields are present", function() {
          var data;
          data = {
            twitter: true,
            social_login: null
          };
          return rules.validations.requiredWithAny(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should return error when field under validation is undefined and any one with any fields are present", function() {
          var data;
          data = {
            twitter: true,
            social_login: void 0
          };
          return rules.validations.requiredWithAny(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should work fine when field under validation is false and any one with any fields are present", function() {
          var data;
          data = {
            twitter: true,
            social_login: false
          };
          return rules.validations.requiredWithAny(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        return it("should work fine when `with any fields` are present and field under validation is also present and not false", function() {
          var data;
          data = {
            twitter: true,
            social_login: true
          };
          return rules.validations.requiredWithAny(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("required_without_all", function() {
        var field, message, ruleDefination;
        field = 'phone_number';
        message = 'phone number is required when you are not member or staff';
        ruleDefination = 'member,staff';
        it("should work fine when `without all fields` are present and field under validation is also not present", function() {
          var data;
          data = {
            member: true
          };
          return rules.validations.requiredWithoutAll(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should return error when `without all fields` are not present and field under validation is also not present", function() {
          var data;
          data = {};
          return rules.validations.requiredWithoutAll(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should return error when `without all fields` are not present and field under validation is null", function() {
          var data;
          data = {
            phone_number: null
          };
          return rules.validations.requiredWithoutAll(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should return error when `without all fields` are not present and field under validation is undefined", function() {
          var data;
          data = {
            phone_number: void 0
          };
          return rules.validations.requiredWithoutAll(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should work fine when `without all fields` are not present and field under validation is false", function() {
          var data;
          data = {
            phone_number: false
          };
          return rules.validations.requiredWithoutAll(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        return it("should work fine when `without all fields` are not present and field under validation is true or present", function() {
          var data;
          data = {
            phone_number: true
          };
          return rules.validations.requiredWithoutAll(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("required_without_any", function() {
        var field, message, ruleDefination;
        field = 'email_address';
        message = 'email address is required without twitter and phone number';
        ruleDefination = 'twitter_token,phone_number';
        it("should work fine when `without any fields` are present and field under validation is also not present", function() {
          var data;
          data = {
            twitter_token: 'sometoken',
            phone_number: '9102301021'
          };
          return rules.validations.requiredWithoutAny(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should return error when any of the `without any fields` are missing and field under validation is not present", function() {
          var data;
          data = {
            phone_number: '9102301021'
          };
          return rules.validations.requiredWithoutAny(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should return error when any of the `without any fields` are missing and field under validation is null", function() {
          var data;
          data = {
            phone_number: '9102301021',
            email_address: null
          };
          return rules.validations.requiredWithoutAny(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        it("should work fine when any of the `without any fields` are missing and field under validation is false", function() {
          var data;
          data = {
            phone_number: '9102301021',
            email_address: false
          };
          return rules.validations.requiredWithoutAny(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should return error when any of the `without any fields` are missing and field under validation is undefined", function() {
          var data;
          data = {
            twitter_token: 'sometoken',
            email_address: void 0
          };
          return rules.validations.requiredWithoutAny(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should return error when any of the `without any fields` are missing and field under validation is present and is true", function() {
          var data;
          data = {
            twitter_token: 'sometoken',
            email_address: '@example.com'
          };
          return rules.validations.requiredWithoutAny(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      context("regex", function() {
        var field, message, ruleDefination;
        field = 'email';
        message = 'regex should match';
        ruleDefination = "^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$";
        it("should execute defined regex on rule defination and fail when regex is not passed", function() {
          var data;
          data = {
            email: 'foo'
          };
          return rules.validations.regex(data, field, message, ruleDefination)["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should execute defined regex on rule defination and succeed when regex is passed", function() {
          var data;
          data = {
            email: 'foo@bar.com'
          };
          return rules.validations.regex(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
      return context("same", function() {
        var field, message, ruleDefination;
        field = 'password_confirm';
        message = 'Password should match';
        ruleDefination = 'password';
        it("should work fine with same field is not present", function() {
          var data;
          data = {};
          return rules.validations.same(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should work fine with same field is present and field under validation is not present", function() {
          var data;
          data = {
            password: 'wuhooo'
          };
          return rules.validations.same(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
        it("should return error when same field value does not equals value of field under validation", function() {
          var data;
          data = {
            password: 'wuhooo',
            password_confirm: 'wuooo'
          };
          return rules.validations.same(data, field, message, ruleDefination).then(function(success) {
            return should.not.exist(success);
          })["catch"](function(err) {
            should.exist(err);
            return expect(err).to.equal(message);
          });
        });
        return it("should work fine when field under validation value is same as `same field's value`", function() {
          var data;
          data = {
            password: 'wuhooo',
            password_confirm: 'wuhooo'
          };
          return rules.validations.same(data, field, message, ruleDefination).then(function(success) {
            return should.exist(success);
          })["catch"](function(err) {
            return should.not.exist(err);
          });
        });
      });
    });
  });

}).call(this);
